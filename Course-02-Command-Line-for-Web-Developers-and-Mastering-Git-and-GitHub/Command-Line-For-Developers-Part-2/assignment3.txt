//Fix formatting for the word GIT

PWD

Syntax
To use this command, type the letters `pwd` into your command prompt and hit [Enter]. 


Important Flags

-L - example usage `pwd -L`
This flag 


-P - example usage `pwd -P`
This flag displays ALL the links to the present directory location. For example if we have a directory 

	/home/projects 

but its full link is 

	/var/www/root/projects

then when we use the `-P` flag, the full link will be displayed to the screen. 

--------------------------------------------------------------------------------

cd

Example usage

The most common way to use the `cd` command is as follows

	cd path/to/directory

Example 1:

Let us assume that we are in the root directory of our filesystem denoted by `/`. We want to navigate to the home directory where we saved our files. The home directory is one level down from our root directory so to get there we 
need to type 

	cd home

If we now wished to access the `Pictures` directory (which is one level down from our `home` directory), we need to type

	cd Pictures

Examples 2:

We can access any directory on the filesystem by typing the `cd` command, followed by the full path to the desired folder. We could also go straight to the `Pictures` directory from our root directory (`/`) by typing

	cd home/Pictures

------------------------------------------------------------------------------


ls

Description

The `ls` command displays an alphabetically ordered list of the files and folders in the current directory and information about those files and folders. 

When used with any of its many flags, the `ls` command can be made to filter and sort the results it displays based on a variety of criteria.                       


-------------------------------------------------------------------------------------

clear

Syntax:

clear

This command has no additional flags. 

----------------------------------------------------------------------------------

more

Example 1:

more +5 story.txt

Using more, followed by a plus sign (+) and a number instructs the command to begin at the line specified by that number. In this case, the more command will show the contents of the file (story.txt), beginning at line 5. 


Example 2:

more -d about_me.txt

Using more with the -d flag shows additional information on how to navigate through the file contents being viewed. It instructs the user - [Press space to continue, 'q' to quit.]. This can be helpful for users who are unfamiliar with navigating through file content via the terminal. 

----------------------------------------------------------------------------------

mkdir

Description:

This command is short for "make directory" and is used to create new folders or directories via the command line, if they do not already exist. If the directory already exists, an error message is shown. The mkdir command can also be used to create multiple directories at once.



-----------------------------------------------------------------------------

touch 
Syntax

touch [-d] [-a] FILE...

touch README.txt style.css main.js

This command will create three new, empty files named README.txt, style.css and main.js if they do not already exist in the current directory.

touch -d '1 May 2005 10:22' options.txt

This command will create a new file called options.txt if it does not already exist in the current directory. It will also set its last accessed time as May 1st 2005 at 10:22. It also sets this date value as the last time the file was modified. 


-----------------------------------------------------------------------------

mv
Example1

mv about-us.txt /home/my-projects

This command will move the file (about-us.txt) to the directory /home/my-projects.


Example 2

mv file.txt life.txt

Using the mv command like this will rename a file called file.txt in the current directory to life.txt. 

---------------------------------------------------------------------------------

rm
Description

This command is used to remove a specified file or files. By default, it does not remove directories.
It is important to note that the effects of the rm command cannot be reversed so one should be cautious when using it. 
This command usually deletes one file at a time however there is an option that allows this behaviour to change. It should also be noted that if the file to be deleted does not have write permissions, a prompt for confirmation is given before the command is executed.

--------------------------------------------------------------------------------

rmdir
Syntax

rmdir -p path/to/directory
This syntax removes the 'directory' folder as well as its parent folders ('path' and 'to') once the 'directory folder is empty.'

rmdir -v path/to/directory
This syntax removes the 'directory' folder once it is empty and also shows a message while executing the command. The message looks something like this -

removing directory, ‘/path/to/directory’ 


--------------------------------------------------------------------------------

man
example

man ls

This command will show the manual page for the ls program, allowing us to see how the ls program works and how to use it.


man 5 passwd

The manual page for the passwd command has many sections. Our example here will begin the man page at section 5. This is useful if you know which section of the manual page contains the information you seek. 

--------------------------------------------------------------------------------------
find 
description


The find command is used to search for files and directories via the command line. It can be used to find files based on search criteria like name, ownership, date/time, size and much more. This command can also be used in conjunction with other commands to perform operations on the files that match the search results.

------------------------------------------------------------------------------------

grep 
syntax

grep 'word' filename

The first argument ('word') is the string pattern that the user wishes to find, the second argument (filename) is the file from which the user would like to find this pattern.

grep 'word' file1 file2 file3

The first argument ('word') is the string pattern that the user wishes to find, the three other arguments are the files from which the user would like to find this pattern.


-----------------------------------------------------------------------------------------

echo
Example

echo Hello World
This command will print the string 'Hello World' to the terminal. 

echo -e "We'd love to \n run around the yard."
This command will display the following to the terminal.

We'd love to
 run around the yard.

Using -e allows us to interpret the \n and a new line. 


-----------------------------------------------------------------------------------------

exit
Description

The exit command causes the termination of a process. If the exit command is used at the shell prompt, the shell will be closed. It can also be used in bash scripts to end the currently running process and show an error code. 

------------------------------------------------------------------------------------------

whoami
syntax

whoami [option]

the whoami command has two options: --help and --version.
whomai --help : displays the man page for the whoami command
whwoami --version : displays the version number of the whoami command. 

----------------------------------------------------------------------------------------------

cp 
example 1


cp main.js main1.js

In this example, we use the cp command to make a copy of the main.js file and store it as main1.js 

cp ~/pictures/picture-*.jpg ~/picture-backup

Here we use the cp command to copy multiple files and folders at once based on a pattern. We are copying all the .jpg files that start with the word 'picture' from the pictures directory into the picture-backup directory.

-----------------------------------------------------------------

wc 

description

This command prints the amount of new lines, words and bytes contained within a file. If more than one file is specified, it gives a total count for all the files. The output is similar to a table and counts are always in the following order: newline, word, character, byte, maximum line length. 



--------------------------------------------------------------------

tar
syntax

tar [-] A --catenate --concatenate | c --create | d --diff --compare | 
    --delete | r --append | t --list | --test-label | u --update | 
    x --extract --get [options] [pathname ...]

    The first argument to the tar command is a function specification and is denoted by these letters (A, c, d, r, t, u, or x). This argument tells the tar command how to behave. For example, the c function specification will tell tar to create a new archive while the x function specification will tell the tar command to extract files from an archive.

    Secondly you must pass one or more options to the tar command and this also affects how the command behaves. For example, if we use the -C path/to/directory option, the command will change to that directory before executing any other action.  

    The final argument we enter is the pathname and as we saw above this is the path or directory that is specified to perform actions like archiving, extracting and other functionality provided by the tar command. q


-----------------------------------------------------------------------------

curl 
example 1

curl -o index.html study.moderndeveloper.com

Using curl with the -o flag allows us to save the contents of the web page at study.moderndeveloper.com to the file named index.html.


curl -L stusy.moderndeveloper.com

By default, does n't process redirects. This means that if a page is moved, the curl command will not be able to access its new location. Using the -L flag, the curl command can follow the HTTP Location headers and redirect tot he new location where the web page is stored. 

----------------------------------------------------------------------------

pipe 
description

Pipe in linux is denoted by the symbol | and is used for communication between commands and processes. The pipe is similar to redirection and it allows the output of one program to be sent to another program for further processing. 

This pipe, or chain of two or more commands allows for the computation of some highly specilzed tasks that none of the individual programs that are a part of pipe could perform themselves. 

------------------------------------------------------------------------------------

ping 
syntax

ping [ -LRUbdfnqrvVaAB] [ -c count] [ -i interval] [ -l preload] [ -p pattern] [ -s packetsize] [ -t ttl] [ -w deadline] [ -F flowlabel] [ -I interface] [ -M hint] [ -Q tos] [ -S sndbuf] [ -T timestamp option] [ -W timeout] [ hop ...] destination


The ping command must be used by first specifying how you want the command to behave from a set of options that are highlighted above in square brackets. A destination address that you would like to ping must then be specified. 



ping -i 5 google.com



-------------------------------------------------------------------------

git status

Example

git status -s
This example shows the results of the git status command in short format. Normally when we view changes we see a message saying

	modified: .....

The -s flag shortens the messaged to say

	M: ......

git status -b

This example shows the results of the git status command however it also shows the branch on which changes were made. The output from this is similar to below:

On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   ....

-------------------------------------------------------------------------------

git init

description
This command creates an empty Git repository. This means that it creates a new folder in your directory name '.git' and addes all the files and subfolders needed to begin tracking any changes that were made. 
This command can also be used to to move an existing repository to another location.

----------------------------------------------------------------------------------

git commit

syntax

git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [-S[<keyid>]] [--] [<file>...]


The git commit command is executed by entering `git commit` followed by an option to determine how the command behaves. According to which option is chosen, additional arguments must be supplied that correspnd to that option. 

The -m option allows you to add a message so it takes the format

git commit -m <message>


The -date option allows you to override the author date. You may want to set the date of your commit as some time in the future or the past. It takes this format.

git commit -d <date>


-----------------------------------------------------------------------------------

git pull

Example

git pull origin master

This command will fetch all the changes from the origin branch on your remote server and merge these changes with the master branch of your local copy. 

git pull --edit origin master

This command opens up an editor before executing the pull so that a descriptive message can be written about it.


--------------------------------------------------------------------------------------

git push
description

This command allows you to upload your changes to a centralized location or remote server. 

-------------------------------------------------------------------------------------------------------

git add 
syntax

git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
    [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
    [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]
    [--] [<pathspec>…​]

This command is used by entering git add, followed by an option. 

git add --all -v adds all changes and shows informational messages about the changes. 

 git add Documentation/\*.txt (adds all files in the Documentation directory with the .txt extension)

--------------------------------------------------------------------------------------------------

git rm
examples

Simple Code Example:

git rm file.txt
This command removes the file named "file.txt"

Complex Code Example:

 git rm Documentation/\*.txt
This command removes all *.txt files from the index that are under the Documentation directory and any of its subdirectories.

-----------------------------------------------------------------------------------------

git branch
description

This command allows you to create, list or delete branches in git. Branching allows you manage many parts of your project in one repository and merge them together. When used correctly branching makes it easy for multiple developers to work on a project in a seamless and un-intrusive way. 


----------------------------------------------------------------------------------

git merge
syntax

git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
               [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]
               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]
       git merge <msg> HEAD <commit>...
       git merge --abort

This command is used by typing git merge followed by one or more options. Additional arguments may be required that are specific to the option that is chosen. 

git merge <branch1> <branch2>

git merge --no-commit <branch3>


---------------------------------------------------------------------------------

git checkout 
examples


git checkout development

this command will switch the current branch you are working on the a branch named development (if a branch named development exists). 

git checkout -b dev

This command will create a branch called dev and changes the current branch being worked on the the dev branch. 

----------------------------------------------------------------------------------

git diff

description

git diff shows the differences between versions files in a git repository. It can be used to show differences between a file in the working directory (unstaged), the index (staged) and the moost recent commmit. It can also be used to show the differences in files between any two points/commits in your project's history.

-----------------------------------------------------------------------------------

git log 

syntax

git log [<options>] [<revision range>] [[\--] <path>…​]

To view your commit history, you must type git log followed by one or more of these parameters - an option, a revision range (a date range), a path (path to the files for which you want to view changes). The chosen arguments will change the output of the command.

git log --no-merges
git log -n <number>

--------------------------------------------------------------------------------------

git fetch 
example

git fetch origin

This above example will copy all new branches and tags from the remote server (origin) and store them in your local repository.

need to add....(Example 2)

--------------------------------------------------------------------------------------

git config
description

This command allows you to view and set options for a repository or the global git environment. 

---------------------------------------------------------------------------------------

git rebase

syntax

git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]
	[<upstream> [<branch>]]
git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]
	--root [<branch>]
git rebase --continue | --skip | --abort | --edit-todo

to be completed...

---------------------------------------------------------------------------------------

alias

example

alias ll='ls -l'

This alias would allow a user to type the characters ll and this would list all files in the directory in long format. 

alias ..='cd ..'
This alias would allow a user to type the character .. and this would change to one directory above the current one.

-------------------------------------------------------------------------------------

chmod

description

This command stands for "change mode" and changes the permissions on files and folder for various users of the system. This means that it allows you to set the rules for each file/folder and this determines who can access it and how it can be accessed.

----------------------------------------

sudo

syntax

sudo -h | -K | -k | -V
     sudo -v [-AknS] [-g group] [-h host] [-p prompt] [-u user]
     sudo -l [-AknS] [-g group] [-h host] [-p prompt] [-U user] [-u user]
          [command]
     sudo [-AbEHnPS] [-C num] [-g group] [-h host] [-p prompt] [-r role]
          [-t type] [-u user] [VAR=value] [-i | -s] [command]
     sudoedit [-AknS] [-C num] [-g group] [-h host] [-p prompt] [-u user] file
          ...

          this command is exceuted by typing sudo followed by one or more options.
























